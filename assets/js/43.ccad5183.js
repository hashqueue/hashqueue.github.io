(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{354:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本文转载自"),a("a",{attrs:{href:"https://www.jianshu.com/p/5b76f4f34bb0",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/5b76f4f34bb0"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"ci-cd-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd-介绍"}},[t._v("#")]),t._v(" CI/CD 介绍")]),t._v(" "),a("ul",[a("li",[t._v("持续集成(Continuous Integration)")]),t._v(" "),a("li",[t._v("持续交付(Continuous Delivery)")]),t._v(" "),a("li",[t._v("持续部署(Continuous Deployment)")])]),t._v(" "),a("h1",{attrs:{id:"持续集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续集成"}},[t._v("#")]),t._v(" 持续集成")]),t._v(" "),a("p",[a("strong",[t._v("持续集成")]),t._v("指的是频繁地将代码集成到主干，强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。")]),t._v(" "),a("h1",{attrs:{id:"持续交付"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续交付"}},[t._v("#")]),t._v(" 持续交付")]),t._v(" "),a("p",[a("strong",[t._v("持续交付")]),t._v("指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。")]),t._v(" "),a("h1",{attrs:{id:"持续部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续部署"}},[t._v("#")]),t._v(" 持续部署")]),t._v(" "),a("p",[a("strong",[t._v("持续部署")]),t._v("是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。")]),t._v(" "),a("h1",{attrs:{id:"持续交付和持续部署的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续交付和持续部署的区别"}},[t._v("#")]),t._v(" 持续交付和持续部署的区别")]),t._v(" "),a("p",[t._v("说白了，持续交付就是自动地从仓库将最新的程序部署到测试环境里，持续部署就是自动地将稳定版本部署到生产环境里。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/hashqueue/blog-image-hosting@master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200426213023-209a93002eb3496c8493b21bdfa2da26.png",alt:"深度截图_选择区域_20200426213023"}})]),t._v(" "),a("h1",{attrs:{id:"ci-cd流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd流程"}},[t._v("#")]),t._v(" CI/CD流程")]),t._v(" "),a("p",[t._v("一般每个团队不一样，这里提供一种思路")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/hashqueue/blog-image-hosting@master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200426214231-b5fb8938ac0247c8bb94080b1f13a080.png",alt:"深度截图_选择区域_20200426214231"}})]),t._v(" "),a("ol",[a("li",[t._v("提交")]),t._v(" "),a("li",[t._v("测试（第一轮）\n"),a("ul",[a("li",[t._v("单元测试：针对方法或模块的测试（至少）")]),t._v(" "),a("li",[t._v("集成测试：针对整体产品的某个功能的测试，又称功能测试")]),t._v(" "),a("li",[t._v("端对端测试：从用户界面直达数据库的全链路测试")])])]),t._v(" "),a("li",[t._v("构建\n通过测试后，代码合并到主干，可以进行构建，所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源等等。")]),t._v(" "),a("li",[t._v("测试（第二轮）\n"),a("ul",[a("li",[t._v("全面测试，自动化为主，少数无法自动化的测试用例，就要人工跑。")]),t._v(" "),a("li",[t._v("新版本的每一个更新点都必须测试到。")])])]),t._v(" "),a("li",[t._v("部署")]),t._v(" "),a("li",[t._v("回滚")])]),t._v(" "),a("h1",{attrs:{id:"常见ci-cd工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见ci-cd工具"}},[t._v("#")]),t._v(" 常见CI/CD工具")]),t._v(" "),a("ol",[a("li",[t._v("jenkins\n免费 + 插件，Jenkins闪耀的地方是其丰富的插件生态系统。它提供了超过1000个插件的扩展版本，可以集成几乎所有市场上可用的工具和服务。作为一个开源工具，您还可以选择自定义适合本土解决方案。")]),t._v(" "),a("li",[t._v("Bamboo\nBamboo 是Atlassian产品套件的一部分，与其他工具类似，它提供构建，测试和部署代码并支持多种语言。它与其他与CI循环相关的Atlassian产品（如JIRA和Bitbucket）有很强的集成。")]),t._v(" "),a("li",[t._v("Circle CI, Travis CI, TeamCity, CodeShip等等")]),t._v(" "),a("li",[t._v("gitlab CI/CD")])]),t._v(" "),a("h1",{attrs:{id:"gitlab-ci-cd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-cd"}},[t._v("#")]),t._v(" gitlab CI/CD")]),t._v(" "),a("p",[t._v("Gitlab持续集成是Gitlab提供的一整套持续集成、持续交付解决方案。")]),t._v(" "),a("h2",{attrs:{id:"配置步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置步骤"}},[t._v("#")]),t._v(" 配置步骤")]),t._v(" "),a("p",[t._v("使用gitlab持续集成需要两步(不分先后）")]),t._v(" "),a("ol",[a("li",[t._v("在repository项目根目录创建.gitlab-ci.yml文件\n"),a("ul",[a("li",[t._v("这个文件是你定义ci任务的地方，每一次push代码到repository，gitlab都会扫描这个文件，按照上面的配置执行相应的任务。")]),t._v(" "),a("li",[t._v("详见"),a("a",{attrs:{href:"https://gitlab.com/help/ci/yaml/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v(".gitlab-ci.yml配置"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[t._v("安装并配置gitlab runner\n"),a("ul",[a("li",[t._v("gitlab runner是运行ci任务的角色，可以是一个虚拟机，一个物理机，或者一个docker容器，甚至容器集群，它和gitlab通过api进行通信，所以唯一要求是runner到gitlab是网络通的。")]),t._v(" "),a("li",[t._v("在gitlab上可以在settings中进行配置，可以看到有一些shared runner，但肯定不是我们需要的，我们要自己定制。")])])])]),t._v(" "),a("p",[t._v("以在docker上安装为例，安装配置步骤如下：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull gitlab/gitlab-runner:latest\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--name")]),t._v(" gitlab-runner "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--restart")]),t._v(" always "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" /srv/gitlab-runner/config:/etc/gitlab-runner "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" /var/run/docker.sock:/var/run/docker.sock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  gitlab/gitlab-runner:latest\n  \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" gitlab-runner gitlab-ci-multi-runner register  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#提示注册信息，这里最好不采用这种交互式的，因为有一些非必要的配置这里不会出现")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置关联gitlab-ci url，在项目settings>CI/CD>runners可以找到")]),t._v("\nPlease enter the gitlab-ci coordinator URL:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置token，在项目settings>CI/CD>runners可以找到")]),t._v("\nPlease enter the gitlab-ci token "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this runner:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# runner描述，随便输")]),t._v("\nPlease enter the gitlab-ci description "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this runner:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# runner的tags，这个很有用，通过tag和jobs关联")]),t._v("\nPlease enter the gitlab-ci tags "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this runner "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comma separated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n\nWhether to run untagged builds "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("true/false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# true")]),t._v("\nPlease enter the executor: docker, parallels, shell, kubernetes, docker-ssh, ssh, virtualbox, docker+machine, docker-ssh+machine:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker")]),t._v("\nPlease enter the default Docker image "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g. ruby:2.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# maven:3.7.9-jdk-8")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("p",[t._v("coordinator URL和token位置如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/hashqueue/blog-image-hosting@master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200426215130-02a3fdeeb6d04d91aca2710f650e1dfb.png",alt:"深度截图_选择区域_20200426215130"}})]),t._v(" "),a("h2",{attrs:{id:"gitlab-ci工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci工作原理"}},[t._v("#")]),t._v(" gitlab ci工作原理")]),t._v(" "),a("p",[t._v("从前文中我们已经知道，有以下几个角色")]),t._v(" "),a("ul",[a("li",[t._v("gitlab")]),t._v(" "),a("li",[t._v("runner")]),t._v(" "),a("li",[t._v("executor\n"),a("ul",[a("li",[t._v("gitlab触发条件后，会通知给对应的runner，runner并不是命令执行者，而是类似一个调度器或者说中介，真正干活的是executor，我们完全可以构建自己的executor来满足我们的CI需求。比如通过docker自定义容器实现（docker是个好东西）。")])])])]),t._v(" "),a("h2",{attrs:{id:"我们的ci-cd方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们的ci-cd方案"}},[t._v("#")]),t._v(" 我们的CI/CD方案")]),t._v(" "),a("p",[t._v("因为我们产品上线是在公司有严格控制的，所以CD中最后一步“部署上线”肯定是满足不了的，策略就是从提交代码开始，到测试环境的部署测试。结合实际项目情况，方案图例如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/hashqueue/blog-image-hosting@master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200426220852-0c3597f0e106429f8e28b7c865db3f89.png",alt:"深度截图_选择区域_20200426220852"}})]),t._v(" "),a("p",[t._v("首先只有mr动作触发我们的pipeline，进行单测，单测通过后部署到测试环境中，然后跑自动化测试，都通过后，由代码reveiwer惹怒元不能自动化的新功能新需求，通过后补充手动测试，QA确认通过后整个流结束。")])])}),[],!1,null,null,null);a.default=n.exports}}]);