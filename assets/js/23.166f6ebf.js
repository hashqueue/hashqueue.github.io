(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{334:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据类型和运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型和运算符"}},[t._v("#")]),t._v(" 数据类型和运算符")]),t._v(" "),s("p",[t._v("[toc]")]),t._v(" "),s("p",[t._v("Java语言是一门强类型语言。强类型包含两方面的含义")]),t._v(" "),s("ul",[s("li",[t._v("所有的变量必须先声明、后使用")]),t._v(" "),s("li",[t._v("指定类型的变量只能接受类型与之匹配的值。")])]),t._v(" "),s("p",[t._v("强类型语言可以在编译过程中发现源代码的错误 ,从而保证程序更加健壮。")]),t._v(" "),s("p",[t._v("Java语言提供了丰富的基本数据类型,例如整型、字符型、浮点型和布尔型等。基本类型大致上可以分为两类:")]),t._v(" "),s("ul",[s("li",[t._v("数值类型\n"),s("ul",[s("li",[t._v("数值类型包括整型、字符型和浮点型,所有数值类型之间可以进行类型转换,这种类型转换包括"),s("code",[t._v("自动类型转换")]),t._v("和"),s("code",[t._v("强制类型转换")]),t._v("。")])])]),t._v(" "),s("li",[t._v("布尔类型\n"),s("ul",[s("li",[t._v("true/false")])])])]),t._v(" "),s("h2",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("p",[t._v("编写程序时总需要为程序添加一些注释,用以说明某段代码的作用,或者说明某个类的用途、某个方法的功能,以及该方法的参数和返回值的数据类型及意义等。")]),t._v(" "),s("p",[t._v("除此之外,添加注释也是调试程序的一个重要方法。如果觉得某段代码可能有问题,可以先把这段代码注释起来,让编译器忽略这段代码,再次编译、运行,如果程序可以正常执行,则可以说明错误就是由这段代码引起的,这样就缩小了错误所在的范围,有利于排错;如果依然出现相同的错误,则可以说明错误不是由这段代码引起的,同样也缩小了错误所在的范围。")]),t._v(" "),s("ul",[s("li",[t._v("单行注释\n"),s("ul",[s("li",[t._v("语法："),s("code",[t._v("//")])]),t._v(" "),s("li",[t._v("解释：单行注释就是在程序中注释一行代码,在Java语言中,将双斜线(//)放在需要注释的内容之前就可以了")])])]),t._v(" "),s("li",[t._v("多行注释\n"),s("ul",[s("li",[t._v("语法："),s("code",[t._v("/* */")])]),t._v(" "),s("li",[t._v("多行注释是指一次性地将程序中多行代码注释掉,在Java语言中,使用"),s("code",[t._v("/*")]),t._v("和"),s("code",[t._v("*/")]),t._v("将程序中需要注释的内容包含起来,"),s("code",[t._v("/*")]),t._v("表示注释开始,而"),s("code",[t._v("*/")]),t._v("表示注释结束。")])])])]),t._v(" "),s("p",[t._v("程序实例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataTypesAndOperators")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n        这是多行注释\n        */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         这是文档注释\n         这是文档注释\n         这是文档注释\n         这是文档注释\n         */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是单行注释")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloJava"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//        System.out.println("这行代码被注释了，程序运行时这行代码不会被执行");')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("ul",[s("li",[t._v("文档注释\n"),s("ul",[s("li",[t._v("语法："),s("code",[t._v("/** */")])]),t._v(" "),s("li",[t._v("解释：文档注释以斜线后紧跟两个星号("),s("code",[t._v("/**")]),t._v(")开始,以星号后紧跟一个斜线("),s("code",[t._v("*/")]),t._v(")结束,中间部分全部都是文档注释.")])])])]),t._v(" "),s("h2",{attrs:{id:"标识符和关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字"}},[t._v("#")]),t._v(" 标识符和关键字")]),t._v(" "),s("h3",{attrs:{id:"分隔符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分隔符"}},[t._v("#")]),t._v(" 分隔符")]),t._v(" "),s("p",[t._v("Java语言里的分号"),s("code",[t._v(";")]),t._v("、花括号"),s("code",[t._v("{}")]),t._v("、方括号"),s("code",[t._v("[]")]),t._v("、圆括号"),s("code",[t._v("()")]),t._v("、空格、圆点"),s("code",[t._v(".")]),t._v("都具有特殊的分隔作用,因此被统称为分隔符。")]),t._v(" "),s("ul",[s("li",[t._v("分号：Java语言采用分号"),s("code",[t._v(";")]),t._v("作为语句的分隔,因此每个Java语句必须使用分号作为结尾。")]),t._v(" "),s("li",[t._v("花括号：花括号的作用就是定义一个代码块,一个代码块指的就是"),s("code",[t._v("{")]),t._v("和"),s("code",[t._v("}")]),t._v("所包含的一段代码,代码块在逻辑上是一个整体。花括号一般是成对出现的")]),t._v(" "),s("li",[t._v("方括号：方括号的主要作用是用于访问数组元素,方括号通常紧跟数组变量名,而方括号里指定希望访问的数组元素的索引。")]),t._v(" "),s("li",[t._v("圆括号：圆括号是一个功能非常丰富的分隔符:\n"),s("ul",[s("li",[t._v("定义方法时必须使用圆括号来包含所有的形参声明,调用方法时也必须使用圆括号来传入实参值;")]),t._v(" "),s("li",[t._v("圆括号还可以将表达式中某个部分括成一个整体,保证这个部分优先计算")]),t._v(" "),s("li",[t._v("圆括号还可以作为强制类型转换的运算符。")])])]),t._v(" "),s("li",[t._v("空格\n"),s("ul",[s("li",[t._v("Java语言使用空格分隔一条语句的不同部分。")]),t._v(" "),s("li",[t._v("Java语言是一门格式自由的语言,所以空格几乎可以出现在Java程序的任何地方,也可以出现任意多个空格,但不要使用空格把一个变量名隔开成两个,这将导致程序出错。")]),t._v(" "),s("li",[t._v("Java语言中的空格包含空格符"),s("code",[t._v("Space")]),t._v("、制表符"),s("code",[t._v("Tab")]),t._v("和回车"),s("code",[t._v("Enter")]),t._v("等。")]),t._v(" "),s("li",[t._v("Java源程序还会使用空格来合理缩进Java代码,从而提供更好的可读性。")])])]),t._v(" "),s("li",[t._v("圆点：圆点"),s("code",[t._v(".")]),t._v("通常用作类对象和它的成员(包括成员变量、方法和内部类)之间的分隔符，表明调用某个类或某个实例的指定成员")])]),t._v(" "),s("h3",{attrs:{id:"java标识符规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java标识符规则"}},[t._v("#")]),t._v(" Java标识符规则")]),t._v(" "),s("p",[t._v("标识符就是用于给程序中变量、类、方法命名的符号,Java言的标识符必须以字母、下画线"),s("code",[t._v("_")]),t._v("、美元符"),s("code",[t._v("$")]),t._v("开头，后面可以跟任意数目字母数字、下画线"),s("code",[t._v("_")]),t._v("和美元符"),s("code",[t._v("$")]),t._v("\n使用标识符时，需要注意如下规则:")]),t._v(" "),s("ul",[s("li",[t._v("标识符可以由字母、数字、下画线"),s("code",[t._v("_")]),t._v("和美元符"),s("code",[t._v("$")]),t._v("组成，其中数字不能打头。")]),t._v(" "),s("li",[t._v("标识符不能是Java关键字和保留字，但可以包含关键和保留字。")]),t._v(" "),s("li",[t._v("标识符不能包含空格")]),t._v(" "),s("li",[t._v("标识符只能包含美元符"),s("code",[t._v("$")]),t._v("，不能包含"),s("code",[t._v("@")]),t._v("、"),s("code",[t._v("#")]),t._v("等其他特殊字符")])]),t._v(" "),s("h3",{attrs:{id:"java关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java关键字"}},[t._v("#")]),t._v(" Java关键字")]),t._v(" "),s("p",[s("code",[t._v("abstract")]),t._v(" "),s("code",[t._v("contmue")]),t._v(" "),s("code",[t._v("for")]),t._v(" "),s("code",[t._v("new")]),t._v(" "),s("code",[t._v("switch")]),t._v(" "),s("code",[t._v("assert")]),t._v(" "),s("code",[t._v("default")]),t._v(" "),s("code",[t._v("if")]),t._v(" "),s("code",[t._v("package")]),t._v(" "),s("code",[t._v("synchronized")]),t._v(" "),s("code",[t._v("boolean")]),t._v(" "),s("code",[t._v("do")]),t._v(" "),s("code",[t._v("goto")]),t._v(" "),s("code",[t._v("private")]),t._v(" "),s("code",[t._v("this")]),t._v(" "),s("code",[t._v("break")]),t._v(" "),s("code",[t._v("double")]),t._v(" "),s("code",[t._v("implements")]),t._v(" "),s("code",[t._v("protected")]),t._v(" "),s("code",[t._v("throw")]),t._v(" "),s("code",[t._v("byte")]),t._v(" "),s("code",[t._v("else")]),t._v(" "),s("code",[t._v("import")]),t._v(" "),s("code",[t._v("public")]),t._v(" "),s("code",[t._v("throws")]),t._v(" "),s("code",[t._v("case")]),t._v(" "),s("code",[t._v("enum")]),t._v(" "),s("code",[t._v("instanceof")]),t._v(" "),s("code",[t._v("retum")]),t._v(" "),s("code",[t._v("transient")]),t._v(" "),s("code",[t._v("catch")]),t._v(" "),s("code",[t._v("extends")]),t._v(" "),s("code",[t._v("int")]),t._v(" "),s("code",[t._v("short")]),t._v(" "),s("code",[t._v("try")]),t._v(" "),s("code",[t._v("char")]),t._v(" "),s("code",[t._v("final")]),t._v(" "),s("code",[t._v("inteface")]),t._v(" "),s("code",[t._v("static")]),t._v(" "),s("code",[t._v("void")]),t._v(" "),s("code",[t._v("class")]),t._v(" "),s("code",[t._v("finally")]),t._v(" "),s("code",[t._v("long")]),t._v(" "),s("code",[t._v("strictfp")]),t._v(" "),s("code",[t._v("volatile")]),t._v(" "),s("code",[t._v("const")]),t._v(" "),s("code",[t._v("float")]),t._v(" "),s("code",[t._v("native")]),t._v(" "),s("code",[t._v("super")]),t._v(" "),s("code",[t._v("while")])]),t._v(" "),s("h2",{attrs:{id:"数据类型分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型分类"}},[t._v("#")]),t._v(" 数据类型分类")]),t._v(" "),s("p",[t._v("Java语言是强类型(strongly typed)语言，强类型包含两方面的含义：")]),t._v(" "),s("ul",[s("li",[t._v("所有的变量必须先声明")]),t._v(" "),s("li",[t._v("指定类型的变量只能接受类型与之匹配的值\n声明变量的语法："),s("code",[t._v("type varName[ =初始值];")])])]),t._v(" "),s("p",[t._v("Java语言支持的类型分为两类,基本类型(Primitive Type)和引用类型(Reference Type):")]),t._v(" "),s("h3",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("ul",[s("li",[t._v("基本类型包括"),s("code",[t._v("boolean类型")]),t._v("和"),s("code",[t._v("数值类型")]),t._v("。\n"),s("ul",[s("li",[t._v("数值类型有"),s("code",[t._v("整数类型")]),t._v("和"),s("code",[t._v("浮点类型")]),t._v("。\n"),s("ul",[s("li",[t._v("整数类型包括"),s("code",[t._v("byte")]),t._v(" "),s("code",[t._v("short")]),t._v(" "),s("code",[t._v("int")]),t._v(" "),s("code",[t._v("long")]),t._v(" "),s("code",[t._v("char")]),t._v("(char代表字符型，实际上字符型也是一种整数类型，相当于无符号整数类型)")]),t._v(" "),s("li",[t._v("浮点类型包括"),s("code",[t._v("float")]),t._v(" "),s("code",[t._v("double")])])])]),t._v(" "),s("li",[t._v("boolean类型："),s("code",[t._v("true")]),t._v("和"),s("code",[t._v("false")])])])])]),t._v(" "),s("h3",{attrs:{id:"引用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),s("ul",[s("li",[t._v("引用类型包括类、接口和数组类型，还有一种特殊的null类型\n"),s("ul",[s("li",[t._v("所谓引用数据类型就是对一个对象的引用，对象包括实例和数组两种。实际上，引用类型变量就是一个指针，只Java语言里不再使用指针这个说法")]),t._v(" "),s("li",[t._v("空类型"),s("code",[t._v("null type")]),t._v("就是"),s("code",[t._v("null")]),t._v("值的类型，这种类型没有名称。因为null类型没有名称，所以不可能声明一个"),s("code",[t._v("null")]),t._v("类型的变量或者转换到"),s("code",[t._v("null")]),t._v("类型。空引用("),s("code",[t._v("null")]),t._v(")是null类型变量唯一的值。空引用"),s("code",[t._v("null")]),t._v("可以转换为任何引用类型")]),t._v(" "),s("li",[t._v("在实际开发中程序员可以忽略null类型，假定"),s("code",[t._v("null")]),t._v("只是引用类型的一个特殊直接量。(空引用("),s("code",[t._v("null")]),t._v(")只能被转换成引用类型不能转换成基本类型，因此不要把一个`null值赋给基本数据类型的变量)")])])])]),t._v(" "),s("h3",{attrs:{id:"基本数据类型分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型分类"}},[t._v("#")]),t._v(" 基本数据类型分类")]),t._v(" "),s("p",[t._v("Java的基本数据类型分为两大类：boolean类型和数值类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/hashqueue/blog-image-hosting@master/images//image-20200322150243567-813b3c26a10a49f0944c6f7e6f601d71-bca4ab653d90417fb309f731198bc7af.png",alt:"image-20200322150243567-813b3c26a10a49f0944c6f7e6f601d71"}})]),t._v(" "),s("p",[t._v("Java 只包含这8种基本数据类型，值得指出的是，字符串不是基本数据类型 字符串是一个类，也就是一个引用数据类型。")]),t._v(" "),s("h4",{attrs:{id:"整型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[t._v("#")]),t._v(" 整型")]),t._v(" "),s("p",[t._v("通常所说的整型，实际指的是如下4种类型")]),t._v(" "),s("ul",[s("li",[t._v("byte:一个byte类型整数在内存里占8位，表数范围：-128(-2"),s("sup",[t._v("7")]),t._v(") ~ 127(2"),s("sup",[t._v("7")]),t._v("-1)")]),t._v(" "),s("li",[t._v("short:一个short类型整数在内存里占16位，表数范围：-32768(-2"),s("sup",[t._v("15")]),t._v(") ~ 32768(2"),s("sup",[t._v("15")]),t._v("-1)")]),t._v(" "),s("li",[t._v("int:一个int类型整数在内存里占32位，表数范围：-2147483648(-2"),s("sup",[t._v("31")]),t._v(") ~ 2147483648(2"),s("sup",[t._v("31")]),t._v("-1)")]),t._v(" "),s("li",[t._v("long:一个long类型整数在内存里占64位，表数范围：-2"),s("sup",[t._v("63")]),t._v(" ~ 2"),s("sup",[t._v("63")]),t._v("-1")])]),t._v(" "),s("h4",{attrs:{id:"字符型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符型"}},[t._v("#")]),t._v(" 字符型")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//字符型\nchar my_char1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'中'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nchar my_char2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'国'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//制表符\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_char1'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('my_char2："')]),t._v(" + my_char1 + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//双引号double_a + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("：9999999.56461346\nbyte_to_short：5\nbyte_to_char：\nbyte_to_int：5\nbyte_to_float：5.0\nbyte_to_long：5\nbyte_to_double：5.0\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("my_char1"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("my_char2"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('："')]),t._v(" + my_char1 + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//单引号\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"\\'my_char1\\'"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v("\\'my_char2\\'：\"")]),t._v(" + my_char1 + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//反斜线\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),t._v("my_char1"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),t._v("my_char2"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),t._v('："')]),t._v(" + my_char1 + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//退格符\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_char1'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\b"}},[t._v("\\b")]),t._v('my_char2："')]),t._v(" + my_char1 + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//my_charmy_char2：中国  删除了"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_char1'")]),t._v("中的"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n//换行符\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_char1："')]),t._v(" + my_char1 + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('my_char2："')]),t._v(" + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//回车符\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_char1'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('my_char2："')]),t._v(" + my_char1 + my_char2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//char类型赋值给int类型\nchar name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint char_to_int "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"char_to_int："')]),t._v(" + char_to_int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//24352\n//int类型赋值给char类型\nchar int_to_char "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int_to_char："')]),t._v(" + int_to_char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//✐\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])]),s("h4",{attrs:{id:"浮点型float和double"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点型float和double"}},[t._v("#")]),t._v(" 浮点型float和double")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("/*\n因为 Java 浮点数使用二进制数据的科学计数法来表示浮点数，因此可能不能精确表\n示一个浮点数。例如把 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(".2345556f 值赋给一个 float 类型变量，接着输出这个变量时看到\n这个变量的值已经发生了改变 使用 double 类型的浮点数比 float 类型的浮点数更精确，\n但如果浮点数的精度足够高"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("小数点后的数字很多 时"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ，依然可能发生这种情况。\n如果开发者需要精确保存一个浮点数，则可以考虑使用 BigDecimal类\n\ndouble 类型代表双精度浮点数 float 类型代表单精度浮点数 。\n一 double 类型的数值占8字节、64 位， 一个float 类型的数值占4字节、 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" 位。\n如果希望 Java把一个浮点类型值当成 float 类型处理，应该在这个浮点类型值后紧跟f或F。\n */\nfloat my_float_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 456f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_float_num:"')]),t._v(" + my_float_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble my_double_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("456.23541")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_double_num:"')]),t._v(" + my_double_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble zero "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_float_num/zero"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"******************************"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//Java 还提供了3个特殊的浮点数值:正无穷大、负无穷大和非数\n/*\n正无穷大通过 Double、float 类的 POSITIVE_INFINITY 表示\n负无穷大通Double、Float 类的 NEGATIVE_INFINITY 表示\n非数通过 Double、Float 类的 NaN 表示\n必须指出的是，所有的正无穷大数值都是相等的，所有的负无穷大数值都是相等的\n NaN 不与任何数值相等,甚至和 NaN 都不相等\n */\n//float和double的负无穷大\nfloat a_float1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float.POSITIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble double_float1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Double.POSITIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Float.NEGATIVE_INFINITY:"')]),t._v(" + Float.POSITIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Double.NEGATIVE_INFINITY:"')]),t._v(" + Double.POSITIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a_float1:"')]),t._v(" + a_float1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double_float1:"')]),t._v(" + double_float1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a_float1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" double_float1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"******************************"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//float和double的负无穷大\nfloat a_float2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float.NEGATIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble double_float2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Double.NEGATIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Float.NEGATIVE_INFINITY:"')]),t._v(" + Float.NEGATIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Double.NEGATIVE_INFINITY:"')]),t._v(" + Double.NEGATIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a_float2:"')]),t._v(" + a_float2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double_float2:"')]),t._v(" + double_float2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a_float2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" double_float2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"******************************"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//float和double的非数\nfloat a_float3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float.NaN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble double_float3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Double.NaN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Float.NEGATIVE_INFINITY:"')]),t._v(" + Float.NaN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Double.NEGATIVE_INFINITY:"')]),t._v(" + Double.NaN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a_float3:"')]),t._v(" + a_float3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double_float3:"')]),t._v(" + double_float3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a_float3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" double_float3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br")])]),s("h4",{attrs:{id:"布尔类型boolean-true和false"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型boolean-true和false"}},[t._v("#")]),t._v(" 布尔类型boolean true和false")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("/*\n布尔型只有 boolean 类型，用于表示逻辑上的"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"真"')]),t._v("或"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"假"')]),t._v("。\n在 Java 语言中， boolean 类型的数值只能是 true或false ，不能用0或者非0来代表。\n其他基本数据类型的值也不能转换成 boolean 类型。\n\n字符串 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v(" 不会直接转换成 boolean 类型.\n但如果使用一个boolean 类型的值和字符串进行连接运算，则 boolean 类型的值将会自动转换成字符串 看下面代码\n*/\nboolean boolean1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nboolean boolean2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" boolean1 + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" boolean2 + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str1："')]),t._v(" + str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str2："')]),t._v(" + str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h3",{attrs:{id:"基本类型的类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的类型转换"}},[t._v("#")]),t._v(" 基本类型的类型转换")]),t._v(" "),s("h4",{attrs:{id:"自动类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动类型转换"}},[t._v("#")]),t._v(" 自动类型转换")]),t._v(" "),s("ul",[s("li",[t._v("Java 所有的数值型变量可以相互转换，如果系统支持把某种基本类型的值直接赋给另1种基本类型的变量，则这种方式被称为自动类型转换。当把1个表数范围小的数值或变量直接赋给另1个表数范围大的变量时，系统将可以进行自动类型转换:否则就需要强制转换.")]),t._v(" "),s("li",[t._v("表数范围小的可以向表数范围大的进行自动类型转换，就如同有两瓶水，当把小瓶里的水倒入大瓶中时，不会有任何问题 Java 支持自动类型转换的类型如图\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/hashqueue/blog-image-hosting@master/images/image-20200322182706647-427ae67671bf4ee981ead181011f1575-8f594e98131b4816876f9a62dc2c4e3b.png",alt:"image-20200322182706647-427ae67671bf4ee981ead181011f1575"}})]),t._v(" "),s("li",[t._v("上图中所示的箭头左边的数值类型可以自动类型转换为箭头右边的数值类型")]),t._v(" "),s("li",[t._v("当把任何基本类型的值和字符串值进行连接运算时，基本类型的值将自动类型转换为字符串类型，虽然字符串类型不是基本类型，而是引用类型。因此，如果希望把基本类型的值转换为对应的字符串时，可以把基本类型的值和一个空字符串进行连接。")])]),t._v(" "),s("p",[t._v("代码示例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("part_two")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutomaticTypeConversion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 自动类型转换\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" byte_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1字节，在内存中占8位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" char_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'中'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2字节，在内存中占16位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" short_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("56")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2字节，在内存中占16位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" int_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4字节，在内存中占32位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" float_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65161.25f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4字节，在内存中占32位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" long_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99999999L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//8字节，在内存中占64位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" double_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999999.56461346")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//8字节，在内存中占64位")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果希望把基本类型的值转换为对应的字符串时，可以把基本类型的值和一个空字符串进行连接。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double_a + \\"\\"："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" double_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面语句输出：7Hello!")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面语句输出：Hello!34，因为Hello! + 3会把3当成字符串处理，而后再把4当做字符串处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte类型数据向表数范围大的数据类型自动转换")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte转short")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" byte_to_short "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" byte_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"byte_to_short："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" byte_to_short"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//`+`不仅可作为加法运算符使用，还可作为字符串连接运算符使用。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte转char 会报错，byte类型不能自动类型转换为char类型，需要强制类型转换。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" byte_to_char "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" byte_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"byte_to_char："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" byte_to_char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte转int")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" byte_to_int "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" byte_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"byte_to_int："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" byte_to_int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte转float")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" byte_to_float "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" byte_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"byte_to_float："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" byte_to_float"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte转long")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" byte_to_long "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" byte_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"byte_to_long："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" byte_to_long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte转double")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" byte_to_double "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" byte_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"byte_to_double："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" byte_to_double"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("double_a + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("：9999999.56461346\n7Hello"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nHello"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),t._v("\nbyte_to_short：5\nbyte_to_char：\nbyte_to_int：5\nbyte_to_float：5.0\nbyte_to_long：5\nbyte_to_double：5.0\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h4",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),s("p",[t._v('强制类型转换换的语法格式是 (targetType )value ，强制类型转换的运算符是圆括号 (()) 。当进行强制类型转换时，类似于把一个大瓶子里的水倒入一个小瓶子，如果大瓶子里的水不多还好，但如果大瓶子里的水很多，小瓶子将会引起溢出 ，从而造成数据丢失 这种转换也被称为"缩小转换 (Narrow Conversion)"。')]),t._v(" "),s("p",[t._v("代码示例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("part_two")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Coercion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n     * 强制类型转换\n     * 强制类型转换换的语法格式是 (targetType )value ，强制类型转换的运算符是圆括号 (()) 。当进行强制类型转换时，\n     * 类似于把一个大瓶子里的水倒入一个小瓶子，如果大瓶子里的水不多还好，但如果大瓶子里的水很多，\n     * 小瓶子将会引起溢出 ，从而造成数据丢失 这种转换也被称为"缩小转换 (Narrow Conversion)"\n     *\n     * @param args\n     */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" iValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("233")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      强制把一个 int 类型的值转换为 byte 类型 的值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" bValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" iValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      将输出 -23")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-23")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" dValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.98")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      强制把 double 类型的值转换为 int 类型的值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tol "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" dValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      将输出3")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * 在上面程序中，把1个浮点数强制类型转换为整数时， Java 将直接截断浮点数的小数部分。\n         * 除此之外，上面程序还把 233 强制类型转换为 byte 类型的整数，从而变成了-23,这就是典型的溢出\n         */")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//生成一个6位的随机字符串")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义一个空字符串")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进行6次循环")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" int_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" int_number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"本次随机生成的6位字符串为："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//double强转float")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//39.642默认是一个 double 类型的浮点数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" double_to_float "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.642")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double 强转为 float：%f"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" double_to_float"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//double 强转为 float：39.641998")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串转int")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"中"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1999"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1999.5678"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//        int string_to_int1 = Integer.parseInt(name1);//会报错：Exception in thread "main" java.lang.NumberFormatException: For input string: "中"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//只能将数字类型的字符串如："456", "1024"转换成基本数据类型')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" string_to_int2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//        System.out.println("string_to_int1：" + string_to_int1);')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string_to_int2："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" string_to_int2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//格式化输出")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sss"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"字符串str格式化输出：%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串str格式化输出：sss")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-23")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n本次随机生成的6位字符串为：mrfhft\ndouble 强转为 float：39.641998\nstring_to_int2：1999\n字符串str格式化输出：sss\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("Java为8种基本类型都提供了对应的包装类:")]),t._v(" "),s("ul",[s("li",[t._v("boolean ---\x3e Boolean")]),t._v(" "),s("li",[t._v("byte ---\x3e Byte")]),t._v(" "),s("li",[t._v("short ---\x3e Short")]),t._v(" "),s("li",[t._v("int ---\x3e Integer")]),t._v(" "),s("li",[t._v("long ---\x3e Long")]),t._v(" "),s("li",[t._v("char ---\x3e Character")]),t._v(" "),s("li",[t._v("float ---\x3e Float")]),t._v(" "),s("li",[t._v("double ---\x3e Double")])]),t._v(" "),s("p",[t._v("8个包装类都提供了"),s("code",[t._v("parseXxx(String str)")]),t._v("静态方法用于将字符串转换成基本类型。")]),t._v(" "),s("h3",{attrs:{id:"表达式类型的自动提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式类型的自动提升"}},[t._v("#")]),t._v(" 表达式类型的自动提升")]),t._v(" "),s("p",[t._v("代码示例：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//表达式类型的自动提升\nshort short_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//表达式右边中的short_num1将自动提升到 int 类型，则右边的表达式类型为int, 将一个 int 类型值直接赋给 short 类型变量将发生错误\n//        short_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" short_num1 - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//这时候需要手动强转为short类型数据\nshort_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("short"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("short_num1 - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"short类型数据：%s"')]),t._v(", short_num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//换行\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//以下是正确的表达式类型的自动提升\nbyte byte_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nchar char_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'阿'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nshort short_num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1245")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble double_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.56")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n// 右边表达式中最高等级操作数为double_num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", 则右边表达式的类型为double类型,故赋给一个double类型变量\ndouble double_result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" byte_num1 + char_num1 + short_num2 + double_num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double_result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("double"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" char_num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//38463.0\n\n//必须指出,表达式的类型将严格保持和表达式中最高等级操作数相同的类型。下面代码中两个int类型整数进行除法运算，即使无法除尽，也将得到int类型结果\nint int_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//表达式右边两个操作数都是int类型，所以右边表达式的类型为int。\n//虽然29/3不能除尽，但依然会得到一个int类型整数\nint int_result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" int_num1 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int_num1 / 3 = %s"')]),t._v(", int_result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//9\n//从上边的结算结果来看，当两个整数进行除法运算时，如果不能整除，得到的结果将是把小数部分截断后取整数部分。\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//如果表达式中包含了字符串，则又是另1番情形了 因为当把加号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("放在字符串和基本类型值之间时 这个加号是1个字符串连接运算符 而不是进行加法运算 看如下代码：\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java!"')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//Java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("哈3\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//21704\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//21707Java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n/**\n * 对于第1个表达式 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java!"')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(",先进行"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java!"')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v("运算， "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v("转换成字符串,拼接成字符串 Java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("哈, 接着进行 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java!哈"')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("运算，这也是字符串连接运算，结果是 Java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("哈3\n * 对于第2个表达式 先进行 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 加法运算，其中"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v("自动提升到int类型，变成"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),t._v("对应的ASCII值：21704， "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21704")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21707")]),t._v("， 然后进行 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21707")]),t._v(' + "Hello '),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" 运算 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21707")]),t._v("会自动转换成字符串，将变成两个字符串的连接运算 从而得到 21707Java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n */\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br")])]),s("h3",{attrs:{id:"直接量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接量"}},[t._v("#")]),t._v(" 直接量")]),t._v(" "),s("p",[t._v("直接量是指在程序中通过源代码直接给出的值，int a=5这行代码中， 为变a所分配的初始值，就是1个直接量。")]),t._v(" "),s("h4",{attrs:{id:"直接量的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接量的类型"}},[t._v("#")]),t._v(" 直接量的类型")]),t._v(" "),s("p",[t._v("并不是所有的数据类型都可以指定直接量，能指定直接量的通常只有3种类型 基本类型、字符串类型和null类型，具体而言，Java支持如下8种类型的直接量。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int")]),t._v(" 类型的直接量：在程序中直接给出的整型数值， 可分为二进制、十进制、八进制和十六进制4种，其中二进制需要 OB/Ob开头，八进制需要以0开头，十六进制需要Ox/OX开头。例如123、012(对应十进制的10)、Ox12 (对应十进制的18)等")]),t._v(" "),s("li",[s("code",[t._v("long")]),t._v(" 类型的直接量：在整型数值后添加l或L后就变long类型的直接量。例如 3L、Ox12L(对应十进制的18L)")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" 类型的直接量： 在一个浮点数后添加f/F就变成了 float 类型的直接量，这个浮点数可以是标准小数形式，也可以是科学计数法形式 例如 5.34F、3.14E5f")]),t._v(" "),s("li",[s("code",[t._v("double")]),t._v(" 类型的直接量:直接给出1个标准小数形式或者科学计数法形式的浮点数就是 double类型的直接量。 例如 5.34、3.14E5")]),t._v(" "),s("li",[s("code",[t._v("boolean")]),t._v(" 类型的直接量：这个类型的直接量只有 true/false")]),t._v(" "),s("li",[s("code",[t._v("char")]),t._v(" 类型的直接量： char 类型的直接量有三种形式，分别是用单引号括起来的字符、转义字符和Unicode 值表示的字符。例如'a'、'\\n'、'\\u0061'。")]),t._v(" "),s("li",[s("code",[t._v("String")]),t._v(" 类型的直接量：1个用双引号括起来的字符序列就是 String 类型的直接量。")]),t._v(" "),s("li",[s("code",[t._v("null")]),t._v(" 类型的直接量：这个类型的直接量只有1个值，即 null。")])]),t._v(" "),s("p",[t._v("在上面的8种类型的直接量中， null 类型是1种特殊类型，它只有1个值：null，而且这个直接量可以赋给任何引用类型的变量，用以表示这个引用类型变量中保存的地址为空，即还未指向任何有效对象。")]),t._v(" "),s("h4",{attrs:{id:"直接量的赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接量的赋值"}},[t._v("#")]),t._v(" 直接量的赋值")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//直接量的赋值，通常总是把1个直接量赋值给对应类型的变量，例如下面代码都是合法的：\nint a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nchar c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nboolean b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(".12f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString author "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小花花"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString book "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go语言学习入门"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h4",{attrs:{id:"知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),s("ul",[s("li",[t._v("String 类型的直接量不能赋给其他类型的变量， null 类型的直接量可以直接赋给任何引用类型的变量，包括 String 类型。")]),t._v(" "),s("li",[t._v("boolean 类型的直接量只能赋给 boolean 类型的变 ，不能赋给其他任何类型的变量。")]),t._v(" "),s("li",[t._v("关于字符串直接量有一点需要指出， 当程序第一次使用某个字符串直接量时， Java 会使用常量池(constant pool) 来缓存该字符串直接量 ，如果程序后面的部分需要用到该字符串直接量时 Java 会直接使用常量池 (constant pool) 中的字符串直接量。")]),t._v(" "),s("li",[t._v("由于 String 类是一个典型的不可变类，因此 String对象创建出来就不可能被改变，因此无须担心共享 String 对象会导致混乱。")]),t._v(" "),s("li",[t._v("常量池( constant pool )指的是在编译期被确定，并被保存在己编译的 .class 文件中的一些数据，它包括关于类、方法、接口中的 常量， 也包括字符串直接量。\n代码示例：")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("String s0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"he"')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"llo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[t._v('Java会确保每个字符串常量只有1个，不会产生多个副本，例子中的 sO和s1中的 "hello" 是字符串常量，它在编译期就被确定了，所 sO == s1返回true;')]),t._v(" "),s("li",[t._v('"he\'和"ll0" 也都是字符串常量，当一个字符串由多个字符串常量连接而成时，它本身就是字符串常量， s2一样在编译期就被解析为1个字符串常量，所 s2也是常量池中 "hello" 的引用。因此，程序输出 sO == s1返回 true ，s1 == s2 返回 true。')])]),t._v(" "),s("h2",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("h3",{attrs:{id:"算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),s("h4",{attrs:{id:"加法运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加法运算符"}},[t._v("#")]),t._v(" 加法运算符 "),s("code",[t._v("+")])]),t._v(" "),s("ul",[s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//加法运算符 +\nint num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint num_sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 + num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num_sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//24\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"减法运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减法运算符"}},[t._v("#")]),t._v(" 减法运算符 "),s("code",[t._v("-")])]),t._v(" "),s("ul",[s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//减法运算符 -\nint num_subtraction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 - num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num_subtraction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//-4\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"乘法运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乘法运算符"}},[t._v("#")]),t._v(" 乘法运算符 "),s("code",[t._v("*")])]),t._v(" "),s("ul",[s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//乘法运算符 *\nint num_multiplication "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 * num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num_multiplication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//140\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"除法运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#除法运算符"}},[t._v("#")]),t._v(" 除法运算符 "),s("code",[t._v("/")])]),t._v(" "),s("ul",[s("li",[t._v("如果除法运算符的两个操作数都是整数类型(其中除数不可以为0),计算结果取商")]),t._v(" "),s("li",[t._v("如果除法运算符的两个操作数有一个是浮点数或者两个都是浮点数，则计算结果也是浮点数。此时允许除数为0或者0.0，得到的结果是正无穷大或负无穷大。")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("int num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble num3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.54")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble num4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("58.54")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint division_num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num2 / num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//        int division_num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num2 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//除数不可以为0\ndouble division_num3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num3 / num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble division_num4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num4 / num3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble division_num5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num3 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndouble division_num6 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num3 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//        System.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2 / num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("division_num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//1\n//        System.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("division_num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("division_num3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//1.8539999999999999\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("division_num4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//3.157497303128371\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("division_num5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//正无穷大  Infinity\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("division_num6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//正无穷大  Infinity\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-num3 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//负无穷大  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Infinity")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-num3 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//负无穷大  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Infinity")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("h4",{attrs:{id:"取余运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取余运算符"}},[t._v("#")]),t._v(" 取余运算符  "),s("code",[t._v("%")])]),t._v(" "),s("ul",[s("li",[t._v("求余运算符.求余运算的结果不1定总是整数,它的计算结果是使用第一个操作数除以第2操作数后得到1个整除的结果后剩下的值就是余数。")]),t._v(" "),s("li",[t._v("由于求余运算也 要进行除法运算，因此如果求余运算的两个操作数都是整数类型，则求余运算的第2个操作数不能是0，否则将引发除以零异常.")]),t._v(" "),s("li",[t._v("如果求余运算的两个操作数中有1个或者两个都是浮点数，则允许第2个操作数是0或0.0 ，只是求余运算的结果是非数: NaN")]),t._v(" "),s("li",[t._v("0或0.0 对零以外的任何数求余都将得到0或0.0")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("int num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2 % num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//4\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num3 % num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//4.539999999999999\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num3 % "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//非数 NaN\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num3 % "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//非数 NaN\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-num3 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//负无穷大  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Infinity")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-num3 / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//负无穷大  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Infinity")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//0\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(" / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//0.0\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h4",{attrs:{id:"自加-将操作数的值加1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自加-将操作数的值加1"}},[t._v("#")]),t._v(" 自加 "),s("code",[t._v("++")]),t._v(" 将操作数的值加1")]),t._v(" "),s("ul",[s("li",[t._v("自加是单目运算符，只能操作一个操作数")]),t._v(" "),s("li",[t._v("自加运算符只能操作单个数值型(整型、浮点型都行)的变量,不能操作常量或表达式.")]),t._v(" "),s("li",[t._v("运算符既可以出现在操作数的左边，也可以出现在操作数的右边")]),t._v(" "),s("li",[t._v("但出现在左边和右边的效果是不1样的,如果把++放在左边，则先把操作数加1，然后才把操作数放入表达式中运算")]),t._v(" "),s("li",[t._v("如果把++放在右边，则先把操作数放入表达式中运算，然后才把操作数加1"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("int a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//        int a_new1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a++ + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//a先不自增1，直接加3.此时a_new1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("+3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(",然后a在自增1此时a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n//        System.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('"')]),t._v(" + a_new1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//4   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\nint a_new2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ++a + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//a先自增1，直接加3.此时a_new1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("+3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(",然后a在自增1此时a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('"')]),t._v(" + a_new2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//4   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"自减-用法与-自增用法一致-将操作数的值减1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自减-用法与-自增用法一致-将操作数的值减1"}},[t._v("#")]),t._v(" 自减 "),s("code",[t._v("--")]),t._v(" 用法与"),s("code",[t._v("++")]),t._v("自增用法一致 将操作数的值减1")]),t._v(" "),s("ul",[s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("int b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint b_new1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b-- - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('"')]),t._v(" + b_new1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//4   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n//        int b_new2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--b")]),t._v(" - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//        System.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('"')]),t._v(" + b_new2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//4   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"自加和自减总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自加和自减总结"}},[t._v("#")]),t._v(" 自加和自减总结")]),t._v(" "),s("ul",[s("li",[t._v("自加和自减只能用于操作变量，不能用于操作数值直接量、常量或表达式")]),t._v(" "),s("li",[t._v("Java 并没有提供其他更复杂的运算符，如果需要完成乘方、开方等运算，则可借助于 java.lang.Math类的工具方法完成复杂的数学运算")]),t._v(" "),s("li",[t._v("Math 类下包含了丰富的静态方法，用于完成各种复杂的数学运算。")])]),t._v(" "),s("h4",{attrs:{id:"赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),s("p",[t._v("赋值运算符用于为变量指定变量值，与C类似， Java也使用=作为赋值运算符。通常，使用赋值运算符将一个直接量值赋给变量。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//为变量赋值\nString str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//        将一个变量的值赋值给另一个变量\nString myFavoriteProgramLanguage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我最喜欢的编程语言之一是%s'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("其次是%s"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('我今年%d岁了,"')]),t._v(" +\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我相信自己可以学会这两门编程语言~"')]),t._v(", myFavoriteProgramLanguage, str2, age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v('赋值运算符是从右向左执行计算的，程序先计算得到=右边的值,然后将该值"装入"=左边的变量，因此赋值运算符(=)左边只能是变量。')]),t._v(" "),s("p",[t._v("赋值表达式是有值的，赋值表达式的值就是右边被赋的值")]),t._v(" "),s("ul",[s("li",[t._v("例如 String str2 = str表达式的值就是str.因此，赋值运算符支持连续赋值，通过使用多个赋值运算符，可以一次为多个变量赋值\n"),s("ul",[s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("System.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//连续为多个变量进行赋值\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("666")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a:%d'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("b:%d"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('c:%d"')]),t._v(", a, b, c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])])])])])]),t._v(" "),s("h4",{attrs:{id:"位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),s("p",[t._v("Java支持的位运算符有如下7个")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("&")]),t._v(" 按位与。当两位同时为1时才返回1")]),t._v(" "),s("li",[s("code",[t._v("|")]),t._v(" 按位或。只要有 位为1即可返回1")]),t._v(" "),s("li",[s("code",[t._v("~")]),t._v(" 按位非。单目运算符，将操作数的每个位(包括符号位) 全部取反")]),t._v(" "),s("li",[s("code",[t._v("^")]),t._v(" :按位异或 当两位相同时返回0 不同时返回1")]),t._v(" "),s("li",[s("code",[t._v("<<")]),t._v(" : 左移运算符")]),t._v(" "),s("li",[s("code",[t._v(">>")]),t._v(" : 右移运算符")]),t._v(" "),s("li",[s("code",[t._v(">>>")]),t._v(" : 无符号右移运算符")])]),t._v(" "),s("p",[t._v("一般来说，位运算符只能操作整数类型的变量或值")]),t._v(" "),s("h4",{attrs:{id:"扩展后的赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展后的赋值运算符"}},[t._v("#")]),t._v(" 扩展后的赋值运算符")]),t._v(" "),s("p",[t._v("赋值运算符可与算术运算符、位移运算符结合，扩展成功能更加强大的运算符,扩展后的赋值运算符如下")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("+=")]),t._v(";对于"),s("code",[t._v("x+=y")]),t._v("，即对应于"),s("code",[t._v("x=x+y")])]),t._v(" "),s("li",[s("code",[t._v("-=")]),t._v(";对于"),s("code",[t._v("x-=y")]),t._v("，即对应于"),s("code",[t._v("x=x-y")])]),t._v(" "),s("li",[s("code",[t._v("*=")]),t._v(";对于"),s("code",[t._v("x*=y")]),t._v("，即对应于"),s("code",[t._v("x=x*y")])]),t._v(" "),s("li",[s("code",[t._v("/=")]),t._v(";对于"),s("code",[t._v("x/=y")]),t._v("，即对应于"),s("code",[t._v("x=x/y")])]),t._v(" "),s("li",[s("code",[t._v("%=")]),t._v(";对于"),s("code",[t._v("x%=y")]),t._v("，即对应于"),s("code",[t._v("x=x%y")])]),t._v(" "),s("li",[s("code",[t._v("&=")]),t._v(";对于"),s("code",[t._v("x&=y")]),t._v("，即对应于"),s("code",[t._v("x=x&y")])]),t._v(" "),s("li",[s("code",[t._v("|=")]),t._v(";对于"),s("code",[t._v("x|=y")]),t._v("，即对应于"),s("code",[t._v("x=x|y")])]),t._v(" "),s("li",[s("code",[t._v("^=")]),t._v(";对于"),s("code",[t._v("x^=y")]),t._v("，即对应于"),s("code",[t._v("x=x^y")])]),t._v(" "),s("li",[s("code",[t._v("<<=")]),t._v(";对于"),s("code",[t._v("x<<=y")]),t._v("，即对应于"),s("code",[t._v("x=x<<y")])]),t._v(" "),s("li",[s("code",[t._v(">>=")]),t._v(";对于"),s("code",[t._v("x>>=y")]),t._v("，即对应于"),s("code",[t._v("x=x>>y")])]),t._v(" "),s("li",[s("code",[t._v(">>>=")]),t._v(";对于"),s("code",[t._v("x>>>=y")]),t._v("，即对应于"),s("code",[t._v("x=x>>>y")])]),t._v(" "),s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("byte a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("byte"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//需要强转，否则会报错\nbyte b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a:%d'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('b:%d"')]),t._v(", a, b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),s("p",[t._v("比较运算符用于判断两个变量或常量的大小，比较运算的结果是一个布尔值(true false)。Java支持的比较运算符如下")]),t._v(" "),s("ul",[s("li",[s("code",[t._v(">")]),t._v(": 大于，只支持左右两边操作数是数值类型。如果前面变量的值大于后面变量的值，则返回 true")]),t._v(" "),s("li",[s("code",[t._v(">=")]),t._v(": 大于等于,只支持左右两边操作数是数值类型。如果前面变量的值大于等于后面变量的值，则返回 true")]),t._v(" "),s("li",[s("code",[t._v("<")]),t._v(": 小于，只支持左右两边操作数是数值类型。如果前面变量的值小于后面变量的值，则返回 true")]),t._v(" "),s("li",[s("code",[t._v("<=")]),t._v(": 小于等于，只支持左右两边操作数是数值类型。如果前面变量的值小于等于后面变量的值，返回 true")]),t._v(" "),s("li",[s("code",[t._v("==")]),t._v(": 等于，如果进行比较的两个操作数都是数值类型，即使它们的数据类型不相同，只要它们的值相等，也都将返回true\n"),s("ul",[s("li",[t._v("例如 97 == 'a'返回true. 5.0 == 也返回 true")]),t._v(" "),s("li",[t._v("如果两个操作数都是引用类型，那么只有当两个引用变量的类型具有父子关系时才可以比较，而且这两个引用必须指向同一个对象才会返回true")]),t._v(" "),s("li",[t._v("Java也支持两个boolean类型的值进行行比较，例如，true == false， 将返回 false")])])]),t._v(" "),s("li",[s("code",[t._v("!=")]),t._v(":不等于，如果进行比较的两个操作数都是数值类型，无论它们的数据类型是否相同，只要它们的值不相等，也都将返回true\n"),s("ul",[s("li",[t._v("如果两个操作数都是引用类型，只有当两个引用变量的类型具有父子关系时才可以比较，只要两个引用指向的不是同一个对象就会返回true。")])])]),t._v(" "),s("li",[t._v("示例"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("int a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a < b? %b'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("b == c? %b"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("a != c? %b"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(", a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b, b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c, a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" c? tru\nString name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小明"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小明"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name1 != name2? %b'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("name1 == name2? %b"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(", name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2, name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nSystem.out.printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true != false? %b'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("true == false? %b"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" false, "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" false? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" false? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n//创建两个Coercion类的对象，分别赋值给t1和t2两个变量引用\nCoercion t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("new Coercion"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nCoercion t2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Coercion"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n// tl和t2 是同一个类的两个实例的引用，所以可以比较\n//但t1和t2 引用不同的对象，所以返回 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t1 是否等于 t2: "')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//t1 是否等于 t2: "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n//直接将 t1 的值赋给t3， 即让t3 指向 t1 指向的对象\nCoercion t3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//t1和t3 指向同一个对象，所以返回 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t1 是否等于 3 : "')]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" t3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//t1 是否等于 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),s("p",[t._v("逻辑运算符用于操作两个布尔型的变量或常量 逻辑运算符主要有如下6个")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("&&")]),t._v(": 与，前后两个操作数必须都是"),s("code",[t._v("true")]),t._v("才返回 "),s("code",[t._v("true")]),t._v("，否则返回 "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("&")]),t._v(":不短路与，作用与"),s("code",[t._v("&&")]),t._v("相同，但不会短路")]),t._v(" "),s("li",[s("code",[t._v("&")]),t._v("与"),s("code",[t._v("&&")]),t._v("的区别:"),s("code",[t._v("&")]),t._v("总会计算前后两个操作数，而"),s("code",[t._v("&&")]),t._v("先计算左边的操作数，如果左边的操作数为"),s("code",[t._v("false")]),t._v("，则直接返回"),s("code",[t._v("false")]),t._v("，根本不会计算右边的操作数")]),t._v(" "),s("li",[s("code",[t._v("||")]),t._v(": 或，只要两个操作数中有一个是"),s("code",[t._v("true")]),t._v("，就可以返回 "),s("code",[t._v("true")]),t._v(" ，否则返回 "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("|")]),t._v(": 不短路或，作用与"),s("code",[t._v("||")]),t._v("相同，但不会短路")]),t._v(" "),s("li",[s("code",[t._v("|")]),t._v("与"),s("code",[t._v("||")]),t._v("的区别:"),s("code",[t._v("|")]),t._v("总会计算前后两个操作数，而"),s("code",[t._v("||")]),t._v("先计算左边的操作数，如果左边的操作数为"),s("code",[t._v("true")]),t._v("，则直接返回"),s("code",[t._v("true")]),t._v("，根本不会计算右边的操作数")]),t._v(" "),s("li",[s("code",[t._v("!")]),t._v(": 非，只需要一个操作数，如果操作数为"),s("code",[t._v("true")]),t._v(" ，则返回 "),s("code",[t._v("false")]),t._v(" 如果操作数为 "),s("code",[t._v("false")]),t._v(" ，则返回 "),s("code",[t._v("true")])]),t._v(" "),s("li",[s("code",[t._v("^")]),t._v(": 异或，当两个操作数不同时才返回 "),s("code",[t._v("true")]),t._v("，如果两个操作数相同则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[t._v("下面代码示范了或、与、非、异或4个逻辑运算符的执行示意"),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("String name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"潇潇"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"大大"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&&  &"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"||  |"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//true\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"三目运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三目运算符"}},[t._v("#")]),t._v(" 三目运算符")]),t._v(" "),s("ul",[s("li",[t._v("三目运算符只有一个 "),s("code",[t._v("?")]),t._v(" ， 三目运算符的语法格式如下:\n"),s("ul",[s("li",[s("code",[t._v("(expression) ? if-true-statement : if-false-statement;")])])])]),t._v(" "),s("li",[t._v("三目运算符的规则是:先对逻辑表达式 "),s("code",[t._v("expression")]),t._v(" 求值，如果逻辑表达式返回 "),s("code",[t._v("true")]),t._v(" ，则返回第二操作数的值，如果逻辑表达式返回 false ，则返回第一个操作数的值")]),t._v(" "),s("li",[t._v("大部分时候，三目运算符都是作为 "),s("code",[t._v("if else")]),t._v(" 的精简写法")]),t._v(" "),s("li",[t._v("三目运算符和 "),s("code",[t._v("if else")]),t._v(" 写法的区别在于: "),s("code",[t._v("if")]),t._v(" 后的代码块可以有多个语句,三目运算符是不支持多个语句的。")]),t._v(" "),s("li",[t._v("三目运算符可以嵌套，嵌套后的三目运算符可以处理更复杂的情况")])]),t._v(" "),s("p",[t._v("示例")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("String str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" ? "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5大于1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5小于1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //5大于1\n//        嵌套的三目运算符\nboolean result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" ? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" ? "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//false\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"运算符的结合性和优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符的结合性和优先级"}},[t._v("#")]),t._v(" 运算符的结合性和优先级")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("所有的数学运算都认为是从左向右运算的， Java 语言中大部分运算符也是从左向右结合的，")])]),t._v(" "),s("li",[s("p",[t._v("只有单目运算符、赋值运算符和三目运算符例外，其中，单目运算符、赋值运算符和三目运算符是从右向左结合的 ，也就是从右向左运算")])]),t._v(" "),s("li",[s("p",[t._v("乘法和加法是两个可结合的运算，也就是说，这两个运算符左右两边的操作数可以互换位置而不会影响结果。")])]),t._v(" "),s("li",[s("p",[t._v("运算符有不同的优先级，所谓优先级就是在表达式运算中的运算顺序。下表列出了包括分隔符在内的所有运算符的优先级顺序，上一行中的运算符总是优先于下一行的。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("运算符说明")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Java 运算符")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("分隔符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v(". [] () {} , ;")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("单目运算符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("++ -- ~ !")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("强制类型转换运算")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("(type)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("乘法/除法/求余")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("* / %")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("加法/减法")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("+ -")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("移位运算符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<< >> >>>")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("关系运算符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("< <= >= > instanceof")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("等价运算符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("== !=")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("按位与")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("&")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("按位异或")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("^")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("按位或")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("|")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("条件与")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("&&")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("条件或")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("||")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("三目运算")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("? :")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("赋值")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("= += -= *= /= &=")])])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);