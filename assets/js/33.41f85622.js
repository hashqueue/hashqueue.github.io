(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{344:function(s,a,t){"use strict";t.r(a);var n=t(7),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("文章转载自"),a("a",{attrs:{href:"https://blog.csdn.net/qq_38975553/article/details/90485432",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java基础_引用数据类型的强制类型转换"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("在Java中由于"),a("code",[s._v("继承")]),s._v("和"),a("code",[s._v("向上转型")]),s._v("，"),a("code",[s._v("子类")]),s._v("可以非常自然地转换成"),a("code",[s._v("父类")]),s._v("，但是"),a("code",[s._v("父类")]),s._v("转换成"),a("code",[s._v("子类")]),s._v("则需要"),a("code",[s._v("强制转换")]),s._v("。因为子类拥有比父类更多的属性、更强的功能，所以父类转换为子类需要强制。那么，是不是只要是父类转换为子类就会成功呢？其实不然，他们之间的强制类型转换是有条件的。")]),s._v(" "),a("p",[s._v("当我们用一个类型的构造器构造出一个对象时，这个对象的类型就已经确定的，也就说它的本质是不会再发生变化了。在Java中我们可以通过继承、向上转型的关系使用父类类型来引用它，这个时候我们是使用功能较弱的类型引用功能较强的对象，这是可行的。但是将功能较强的类型强制转功能较弱的对象时，就不一定可以行了。")]),s._v(" "),a("p",[s._v("举个例子来说明。比如系统中存在Father、Son两个对象。首先我们先构造一个"),a("code",[s._v("Son")]),s._v("对象，然后用一个"),a("code",[s._v("Father")]),s._v("类型变量引用它：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" father "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("在这里"),a("code",[s._v("Son")]),s._v("对象实例被向上转型为"),a("code",[s._v("father")]),s._v("了，但是请注意这个"),a("code",[s._v("fathe")]),s._v("r对象实例在内存中的本质还是"),a("code",[s._v("Son")]),s._v("类型的，只是"),a("code",[s._v("new Son()")]),s._v("的引用类型被设置为"),a("code",[s._v("Father")]),s._v("而已。")])]),s._v(" "),a("p",[a("strong",[s._v("这里有必要提一下: "),a("code",[s._v("Father father = new Father ();")]),s._v("中的"),a("code",[s._v("Father")]),s._v(" 的作用是指"),a("code",[s._v("father")]),s._v("所引用的对象的类型, 在Java中, 任何对象变量的值都是对存储在另外一个地方的一个对象的引用, 一个对象变量并没有实际包含一个对象, 而仅仅引用了一个对象。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),s._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("这条语句是可行的，变量"),a("code",[s._v("son")]),s._v("引用了变量"),a("code",[s._v("father")]),s._v("的地址, 而"),a("code",[s._v("father")]),s._v("引用的对象地址是"),a("code",[s._v("new Son()")]),s._v("创建的"),a("code",[s._v("Son")]),s._v("类型的对象,这里只是将引用的类型强转为"),a("code",[s._v("Son")]),s._v(",而其本质引用地址所存储的对象就是"),a("code",[s._v("Son")]),s._v("类型的,所以是可行的。")])]),s._v(" "),a("p",[s._v("测试:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" father "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),s._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("son"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("控制台输出:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("com.lic.demo.Manager@15db9742\ncom.lic.demo.Manager@15db9742\nson和father引用的地址是相同的\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("前面提到父类强制转换成子类并不是总是成功，那么在什么情况下它会失效呢？")]),s._v(" "),a("p",[s._v("当"),a("strong",[s._v("引用类型的真实身份是父类本身的类型时，强制类型转换就会产生错误")]),s._v("。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" father "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" father "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),s._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这个系统会抛出ClassCastException异常信息:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("Exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"main"')]),s._v(" java.lang.ClassCastException: com.lic.demo.Father cannot be cast to com.lic.demo.Son \n\tat com.lic.demo.Test.main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test.java:10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("为什么在这种情况父类强制转换成子类会抛异常呢?")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("如果是子类强制转换成父类")]),s._v(": "),a("strong",[s._v("那么该Son类型对象的引用为Father类型, 由于Son类型是对Father类型的扩展, 所以在调用Father引用的方法在Son对象中都是存在的, 即可行。")])]),s._v(" "),a("li",[a("code",[s._v("如果父类强制转换成子类")]),s._v(": "),a("strong",[s._v("父类引用的对象是Father类型的, 在强转之后, Father类型对象的引用为Son类型, 而被引用的对象仍是Father类型的, 因此, 在调用方法时,Son中扩展的方法在引用的Father类型对象中并不存在, 一个对象不可能调用一个该对象中不存在方法, 所以不可行! 如果父类引用的对象时是Son类型的, 那么在强转后是Son类型引用的是Son类型的对象, 是可行的。")])])]),s._v(" "),a("p",[s._v("注意: "),a("strong",[s._v("编译器在编译时只会检查类型之间是否存在继承关系，有则通过；而在运行时就会检查它的真实类型，是则通过，否则抛出ClassCastException异常。所以在继承中，子类可以自动转型为父类，但是父类强制转换为子类时只有当引用类型真正的身份为子类时才会强制转换成功，否则失败。")])]),s._v(" "),a("p",[s._v("可以使用"),a("code",[s._v("instanceof")]),s._v("在强转时先进行判断:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" father "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("father "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),s._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("instanceof")]),s._v("运算符是用来"),a("strong",[s._v("在运行时判断对象是否是特定类的一个实例。")])]),s._v(" "),a("p",[a("strong",[s._v("instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例。即:如果father是Son对象的引用,则可以进行强转。")])]),s._v(" "),a("h3",{attrs:{id:"instanceof-用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-用法"}},[s._v("#")]),s._v(" "),a("code",[s._v("instanceof")]),s._v(" 用法：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" object "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("参数：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Result")]),s._v("：布尔类型。")]),s._v(" "),a("li",[a("code",[s._v("Object")]),s._v("：必选项。任意对象表达式。")]),s._v(" "),a("li",[a("code",[s._v("Class")]),s._v("：必选项。任意已定义的对象类。")])]),s._v(" "),a("p",[s._v("说明：")]),s._v(" "),a("ul",[a("li",[s._v("如果"),a("code",[s._v("object")]),s._v("是"),a("code",[s._v("class")]),s._v("的一个实例，则"),a("code",[s._v("instanceof")]),s._v("运算符返回"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("li",[s._v("如果"),a("code",[s._v("object")]),s._v("不是指定类的一个实例，或者"),a("code",[s._v("object")]),s._v("是"),a("code",[s._v("null")]),s._v("，则返回"),a("code",[s._v("false")]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"instanceof在java的编译状态和运行状态是有区别的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof在java的编译状态和运行状态是有区别的"}},[s._v("#")]),s._v(" "),a("code",[s._v("instanceof")]),s._v("在"),a("code",[s._v("Java")]),s._v("的"),a("code",[s._v("编译状态")]),s._v("和"),a("code",[s._v("运行状态")]),s._v("是有区别的：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("在编译状态中，"),a("code",[s._v("class")]),s._v("可以是"),a("code",[s._v("object")]),s._v("对象的父类，自身类，子类。在这三种情况下"),a("code",[s._v("Java")]),s._v("编译时不会报错。")])]),s._v(" "),a("li",[a("strong",[s._v("在运行状态中，"),a("code",[s._v("class")]),s._v("可以是"),a("code",[s._v("object")]),s._v("对象的父类，自身类，不能是子类。在前两种情况下"),a("code",[s._v("result")]),s._v("的结果为"),a("code",[s._v("true")]),s._v("，最后一种为"),a("code",[s._v("false")]),s._v("。但是"),a("code",[s._v("class")]),s._v("为"),a("code",[s._v("子类")]),s._v("时编译不会报错。运行结果为"),a("code",[s._v("false")]),s._v("。")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);